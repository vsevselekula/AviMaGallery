import { useState, useEffect, useCallback } from 'react';
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs';
import {
  ReactionType,
  UserReactionState,
  CampaignReactionCounts,
} from '@/types/reactions';

/**
 * –ü–†–û–°–¢–ê–Ø –≤–µ—Ä—Å–∏—è —Ö—É–∫–∞ —Ä–µ–∞–∫—Ü–∏–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø—Ä–æ–±–ª–µ–º
 * –ë–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –±–µ–∑ –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
 */
export function useReactionsSimple(campaignIds: string[]) {
  const [userReactions, setUserReactions] = useState<UserReactionState>({});
  const [reactionCounts, setReactionCounts] = useState<CampaignReactionCounts>(
    {}
  );
  const [loading, setLoading] = useState(false);
  const [currentUserId, setCurrentUserId] = useState<string | null>(null);

  const supabase = createClientComponentClient();

  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  useEffect(() => {
    const getCurrentUser = async () => {
      const {
        data: { user },
      } = await supabase.auth.getUser();
      setCurrentUserId(user?.id || null);
    };
    getCurrentUser();
  }, [supabase]);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–∫—Ü–∏–∏
  const fetchReactions = useCallback(async () => {
    if (campaignIds.length === 0 || !currentUserId) {
      return;
    }

    setLoading(true);

    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ä–µ–∞–∫—Ü–∏–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π
      const { data: reactions, error } = await supabase
        .from('campaign_reactions')
        .select('*')
        .in('campaign_id', campaignIds);

      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∞–∫—Ü–∏–π:', error);
        return;
      }

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      const newCounts: CampaignReactionCounts = {};
      const newUserReactions: UserReactionState = {};

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ –æ–±—ä–µ–∫—Ç—ã
      campaignIds.forEach((campaignId) => {
        newCounts[campaignId] = {};
        newUserReactions[campaignId] = null;
      });

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Ä–µ–∞–∫—Ü–∏—é
      reactions?.forEach((reaction) => {
        const { campaign_id, reaction_type, user_id } = reaction;

        // –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        if (!newCounts[campaign_id][reaction_type as ReactionType]) {
          newCounts[campaign_id][reaction_type as ReactionType] = 0;
        }
        newCounts[campaign_id][reaction_type as ReactionType]!++;

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∞–∫—Ü–∏—é —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (user_id === currentUserId) {
          newUserReactions[campaign_id] = reaction_type as ReactionType;
        }
      });

      setReactionCounts(newCounts);
      setUserReactions(newUserReactions);
    } catch (error) {
      console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error);
    } finally {
      setLoading(false);
    }
  }, [campaignIds, currentUserId, supabase]); // eslint-disable-line react-hooks/exhaustive-deps

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–∏ (–ü–†–û–°–¢–ê–Ø –≤–µ—Ä—Å–∏—è)
  const toggleReaction = useCallback(
    async (campaignId: string, reactionType: ReactionType) => {
      if (!currentUserId) {
        console.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
        return false;
      }

      const currentReaction = userReactions[campaignId];
      const isRemoving = currentReaction === reactionType;

      try {
        if (isRemoving) {
          // –£–¥–∞–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏—é
          const { error } = await supabase
            .from('campaign_reactions')
            .delete()
            .eq('campaign_id', campaignId)
            .eq('user_id', currentUserId);

          if (error) throw error;
        } else {
          // –î–æ–±–∞–≤–ª—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏—é
          const { error } = await supabase.from('campaign_reactions').upsert(
            {
              campaign_id: campaignId,
              user_id: currentUserId,
              reaction_type: reactionType,
            },
            {
              onConflict: 'campaign_id,user_id',
            }
          );

          if (error) throw error;
        }

        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        await fetchReactions();

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
        window.dispatchEvent(
          new CustomEvent('reactions-updated', {
            detail: { campaignId },
          })
        );

        return true;
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏:', error);
        return false;
      }
    },
    [currentUserId, userReactions, supabase, fetchReactions]
  );

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–∞–º–ø–∞–Ω–∏–π –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  useEffect(() => {
    if (currentUserId && campaignIds.length > 0) {
      fetchReactions();
    }
  }, [fetchReactions]); // eslint-disable-line react-hooks/exhaustive-deps

  // –°–ª—É—à–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–µ–∞–∫—Ü–∏–π –æ—Ç –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
  useEffect(() => {
    const handleReactionsUpdate = (event: CustomEvent) => {
      const { campaignId } = event.detail;
      // –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∫–∞–º–ø–∞–Ω–∏—è –µ—Å—Ç—å –≤ –Ω–∞—à–µ–º —Å–ø–∏—Å–∫–µ - –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      if (campaignIds.includes(campaignId) && currentUserId) {
        fetchReactions();
      }
    };

    window.addEventListener(
      'reactions-updated',
      handleReactionsUpdate as EventListener
    );

    return () => {
      window.removeEventListener(
        'reactions-updated',
        handleReactionsUpdate as EventListener
      );
    };
  }, [campaignIds, currentUserId, fetchReactions]);

  return {
    userReactions,
    reactionCounts,
    loading,
    toggleReaction,
    refetch: fetchReactions,
  };
}
