'use client';

import React, {
  createContext,
  useContext,
  useState,
  useEffect,
  useCallback,
  useMemo,
} from 'react';
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs';
import {
  ReactionType,
  CampaignReaction,
  UserReactionState,
  CampaignReactionCounts,
} from '@/types/reactions';

interface ReactionsContextType {
  userReactions: UserReactionState;
  reactionCounts: CampaignReactionCounts;
  loading: boolean;
  toggleReaction: (
    campaignId: string,
    reactionType: ReactionType
  ) => Promise<boolean>;
  addCampaign: (campaignId: string) => void;
  removeCampaign: (campaignId: string) => void;
  refetch: () => Promise<void>;
}

const ReactionsContext = createContext<ReactionsContextType | undefined>(
  undefined
);

interface ReactionsProviderProps {
  children: React.ReactNode;
}

export function ReactionsProvider({ children }: ReactionsProviderProps) {
  const [userReactions, setUserReactions] = useState<UserReactionState>({});
  const [reactionCounts, setReactionCounts] = useState<CampaignReactionCounts>(
    {}
  );
  const [loading, setLoading] = useState(false);
  const [currentUserId, setCurrentUserId] = useState<string | null>(null);
  const [trackedCampaigns, setTrackedCampaigns] = useState<Set<string>>(
    new Set()
  );

  const supabase = createClientComponentClient();

  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  useEffect(() => {
    const getCurrentUser = async () => {
      const {
        data: { user },
      } = await supabase.auth.getUser();
      setCurrentUserId(user?.id || null);
    };
    getCurrentUser();
  }, [supabase]);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–∫—Ü–∏–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π
  const fetchReactions = useCallback(async () => {
    const campaignIds = Array.from(trackedCampaigns);

    if (campaignIds.length === 0 || !currentUserId) {
      return;
    }

    try {
      setLoading(true);

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ VIEW –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      const { data: summary, error: summaryError } = await supabase
        .from('campaign_reactions_summary')
        .select('*')
        .in('campaign_id', campaignIds);

      if (summaryError) {
        console.error('Error fetching reaction summary:', summaryError);
        // –§–æ–ª–±—ç–∫ –Ω–∞ –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
        await fetchReactionsFromMainTable(campaignIds);
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–∫—Ü–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { data: userReactionsData, error: userError } = await supabase
        .from('campaign_reactions')
        .select('campaign_id, reaction_type')
        .in('campaign_id', campaignIds)
        .eq('user_id', currentUserId);

      if (userError) {
        console.error('Error fetching user reactions:', userError);
        return;
      }

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      const newCounts: CampaignReactionCounts = {};
      const newUserReactions: UserReactionState = {};

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ –æ–±—ä–µ–∫—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∫–∞–º–ø–∞–Ω–∏–π
      campaignIds.forEach((campaignId) => {
        newCounts[campaignId] = {};
        newUserReactions[campaignId] = null;
      });

      // –ó–∞–ø–æ–ª–Ω—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –∏–∑ summary
      summary?.forEach(
        (item: {
          campaign_id: string;
          reaction_type: ReactionType;
          count: number;
        }) => {
          if (!newCounts[item.campaign_id]) {
            newCounts[item.campaign_id] = {};
          }
          newCounts[item.campaign_id][item.reaction_type] = item.count;
        }
      );

      // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ä–µ–∞–∫—Ü–∏–∏
      userReactionsData?.forEach((item) => {
        newUserReactions[item.campaign_id] = item.reaction_type;
      });

      setReactionCounts(newCounts);
      setUserReactions(newUserReactions);
    } catch (error) {
      console.error('Error in fetchReactions:', error);
    } finally {
      setLoading(false);
    }
  }, [trackedCampaigns, currentUserId, supabase]);

  // –§–æ–ª–±—ç–∫ —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
  const fetchReactionsFromMainTable = useCallback(
    async (campaignIds: string[]) => {
      try {
        const { data: reactions, error } = await supabase
          .from('campaign_reactions')
          .select('*')
          .in('campaign_id', campaignIds);

        if (error) {
          console.error('Error fetching reactions from main table:', error);
          return;
        }

        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ–∞–∫—Ü–∏–∏ –ø–æ –∫–∞–º–ø–∞–Ω–∏—è–º
        const newCounts: CampaignReactionCounts = {};
        const newUserReactions: UserReactionState = {};

        campaignIds.forEach((campaignId) => {
          newCounts[campaignId] = {};
          newUserReactions[campaignId] = null;
        });

        reactions?.forEach((reaction: CampaignReaction) => {
          const { campaign_id, reaction_type, user_id } = reaction;

          // –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∞–∫—Ü–∏–π
          if (!newCounts[campaign_id][reaction_type]) {
            newCounts[campaign_id][reaction_type] = 0;
          }
          newCounts[campaign_id][reaction_type]!++;

          // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Ä–µ–∞–∫—Ü–∏—é —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          if (user_id === currentUserId) {
            newUserReactions[campaign_id] = reaction_type;
          }
        });

        setReactionCounts(newCounts);
        setUserReactions(newUserReactions);
      } catch (error) {
        console.error('Error in fetchReactionsFromMainTable:', error);
      }
    },
    [currentUserId, supabase]
  );

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–∫—Ü–∏–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π
  useEffect(() => {
    if (currentUserId && trackedCampaigns.size > 0) {
      fetchReactions();
    }
  }, [fetchReactions, currentUserId, trackedCampaigns.size]);

  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Realtime –ø–æ–¥–ø–∏—Å–∫—É (–í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–û)
  useEffect(() => {
    if (trackedCampaigns.size === 0) return;

    // Realtime –ø–æ–¥–ø–∏—Å–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞

    // TODO: –í–∫–ª—é—á–∏—Ç—å –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–π –ª–æ–≥–∏–∫–∏
    // const channel = supabase
    //   .channel('campaign_reactions_changes')
    //   .on(
    //     'postgres_changes',
    //     {
    //       event: '*',
    //       schema: 'public',
    //       table: 'campaign_reactions',
    //       filter: `campaign_id=in.(${Array.from(trackedCampaigns).join(',')})`,
    //     },
    //     (payload) => {
    //       console.log('üîî –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–π:', payload);
    //       fetchReactions();
    //     }
    //   )
    //   .subscribe();

    // return () => {
    //   console.log('üîï –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç Realtime –ø–æ–¥–ø–∏—Å–∫–∏');
    //   supabase.removeChannel(channel);
    // };
  }, [trackedCampaigns, supabase]);

  // –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–∏
  const toggleReaction = useCallback(
    async (campaignId: string, reactionType: ReactionType) => {
      if (!currentUserId) {
        console.error('‚ùå User not authenticated');
        return false;
      }

      const currentReaction = userReactions[campaignId];
      const isRemoving = currentReaction === reactionType;

      // 1. –û–ü–¢–ò–ú–ò–°–¢–ò–ß–ï–°–ö–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï UI
      setUserReactions((prev) => ({
        ...prev,
        [campaignId]: isRemoving ? null : reactionType,
      }));

      setReactionCounts((prev) => {
        const newCounts = { ...prev };

        if (!newCounts[campaignId]) {
          newCounts[campaignId] = {};
        }

        // –õ–æ–≥–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤:
        if (isRemoving) {
          // –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Ä–µ–∞–∫—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          if (newCounts[campaignId][currentReaction!]) {
            newCounts[campaignId][currentReaction!]! -= 1;
            if (newCounts[campaignId][currentReaction!] === 0) {
              delete newCounts[campaignId][currentReaction!];
            }
          }
        } else {
          // –ï—Å–ª–∏ –±—ã–ª–∞ –ø—Ä–µ–¥—ã–¥—É—â–∞—è —Ä–µ–∞–∫—Ü–∏—è - —É–±–∏—Ä–∞–µ–º –µ—ë
          if (currentReaction && newCounts[campaignId][currentReaction]) {
            newCounts[campaignId][currentReaction]! -= 1;
            if (newCounts[campaignId][currentReaction] === 0) {
              delete newCounts[campaignId][currentReaction];
            }
          }

          // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ä–µ–∞–∫—Ü–∏—é
          if (!newCounts[campaignId][reactionType]) {
            newCounts[campaignId][reactionType] = 0;
          }
          newCounts[campaignId][reactionType]! += 1;
        }

        // –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ

        return newCounts;
      });

      // 2. –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –° –°–ï–†–í–ï–†–û–ú
      try {
        if (isRemoving) {
          // –£–¥–∞–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏—é
          const { error } = await supabase
            .from('campaign_reactions')
            .delete()
            .eq('campaign_id', campaignId)
            .eq('user_id', currentUserId);

          if (error) throw error;
        } else {
          // –î–æ–±–∞–≤–ª—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏—é
          const { error } = await supabase.from('campaign_reactions').upsert(
            {
              campaign_id: campaignId,
              user_id: currentUserId,
              reaction_type: reactionType,
            },
            {
              onConflict: 'campaign_id,user_id',
            }
          );

          if (error) throw error;
        }

        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
        setTimeout(() => {
          fetchReactions();
        }, 500);

        return true;
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º:', error);

        // 3. –û–¢–ö–ê–¢ –ò–ó–ú–ï–ù–ï–ù–ò–ô –ü–†–ò –û–®–ò–ë–ö–ï
        setUserReactions((prev) => ({
          ...prev,
          [campaignId]: currentReaction,
        }));

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏
        setReactionCounts((prev) => {
          const newCounts = { ...prev };

          if (!newCounts[campaignId]) {
            newCounts[campaignId] = {};
          }

          // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤
          if (!isRemoving) {
            // –£–±–∏—Ä–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω—É—é —Ä–µ–∞–∫—Ü–∏—é
            if (newCounts[campaignId][reactionType]) {
              newCounts[campaignId][reactionType]! -= 1;
              if (newCounts[campaignId][reactionType] === 0) {
                delete newCounts[campaignId][reactionType];
              }
            }
          }

          // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Ä–µ–∞–∫—Ü–∏—é
          if (currentReaction) {
            if (!newCounts[campaignId][currentReaction]) {
              newCounts[campaignId][currentReaction] = 0;
            }
            newCounts[campaignId][currentReaction]! += 1;
          }

          return newCounts;
        });

        return false;
      }
    },
    [currentUserId, userReactions, supabase]
  );

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–º–∏ –∫–∞–º–ø–∞–Ω–∏—è–º–∏
  const addCampaign = useCallback((campaignId: string) => {
    setTrackedCampaigns((prev) => new Set(Array.from(prev).concat(campaignId)));
  }, []);

  const removeCampaign = useCallback((campaignId: string) => {
    setTrackedCampaigns((prev) => {
      const newSet = new Set(prev);
      newSet.delete(campaignId);
      return newSet;
    });
  }, []);

  const contextValue = useMemo(
    () => ({
      userReactions,
      reactionCounts,
      loading,
      toggleReaction,
      addCampaign,
      removeCampaign,
      refetch: fetchReactions,
    }),
    [
      userReactions,
      reactionCounts,
      loading,
      toggleReaction,
      addCampaign,
      removeCampaign,
      fetchReactions,
    ]
  );

  return (
    <ReactionsContext.Provider value={contextValue}>
      {children}
    </ReactionsContext.Provider>
  );
}

export function useReactionsContext() {
  const context = useContext(ReactionsContext);
  if (context === undefined) {
    throw new Error(
      'useReactionsContext must be used within a ReactionsProvider'
    );
  }
  return context;
}
