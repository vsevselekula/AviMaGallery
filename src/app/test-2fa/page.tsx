
'use client';

import { useState } from 'react';
import { Setup2FADiagnostic } from '@/components/features/auth/Setup2FADiagnostic';
import { Setup2FA } from '@/components/features/auth/Setup2FA';
import { Button } from '@/components/ui/Button';
import { supabase } from '@/lib/supabase';
import { logger } from '@/lib/logger';

export default function Test2FAPage() {
  const [mode, setMode] = useState<'diagnostic' | 'setup'>('diagnostic');
  const [testResult, setTestResult] = useState<string>('');
  const [isTestRunning, setIsTestRunning] = useState(false);
  const [isCleaningUp, setIsCleaningUp] = useState(false);

  const cleanupProblematicFactors = async () => {
    setIsCleaningUp(true);
    const deleteResults: string[] = [];

    try {
      const { data: allFactors } = await supabase.auth.mfa.listFactors();
      
      if (!allFactors) {
        deleteResults.push('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–∫—Ç–æ—Ä–æ–≤');
        setTestResult(deleteResults.join('\n'));
        return;
      }

      deleteResults.push('üîç –ü–æ–∏—Å–∫ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤...');

      // –ò—â–µ–º –≤—Å–µ —Ç–∏–ø—ã —Ñ–∞–∫—Ç–æ—Ä–æ–≤, –Ω–µ —Ç–æ–ª—å–∫–æ TOTP
      const allFactorTypes = ['totp', 'phone', 'webauthn'] as const;
      const problematicFactors: Array<{ id: string; type: string; name?: string; status: string }> = [];

                    for (const factorType of allFactorTypes) {
          const factors = (allFactors as Record<string, unknown>)[factorType] as Array<{
            id: string;
            friendly_name?: string;
            status: string;
          }> || [];
          factors.forEach((factor) => {
          // –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã:
          // 1. –§–∞–∫—Ç–æ—Ä—ã –±–µ–∑ –∏–º–µ–Ω–∏ –∏–ª–∏ —Å –ø—É—Å—Ç—ã–º –∏–º–µ–Ω–µ–º
          // 2. –§–∞–∫—Ç–æ—Ä—ã —Å —Å—Ç–∞—Ç—É—Å–æ–º unverified
          if (!factor.friendly_name || 
              factor.friendly_name.trim() === '' || 
              factor.status === 'unverified') {
            problematicFactors.push({
              id: factor.id,
              type: factorType,
              name: factor.friendly_name || '–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
              status: factor.status
            });
          }
        });
      }

      if (problematicFactors.length === 0) {
        deleteResults.push('‚úÖ –ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        setTestResult(deleteResults.join('\n'));
        return;
      }

      deleteResults.push(`üö® –ù–∞–π–¥–µ–Ω–æ ${problematicFactors.length} –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤:`);
      problematicFactors.forEach((factor, index) => {
        deleteResults.push(`  ${index + 1}. ID: ${factor.id}, –¢–∏–ø: ${factor.type}, –ò–º—è: "${factor.name}", –°—Ç–∞—Ç—É—Å: ${factor.status}`);
      });

      if (window.confirm(`–ù–∞–π–¥–µ–Ω–æ ${problematicFactors.length} –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤. –£–¥–∞–ª–∏—Ç—å –∏—Ö?`)) {
        deleteResults.push('üóëÔ∏è –ù–∞—á–∏–Ω–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ...');
        
        for (const factor of problematicFactors) {
          try {
            const { error } = await supabase.auth.mfa.unenroll({ factorId: factor.id });
            if (error) {
              deleteResults.push(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è ${factor.id}: ${error.message}`);
            } else {
              deleteResults.push(`‚úÖ –£–¥–∞–ª–µ–Ω: ${factor.type} "${factor.name}"`);
            }
          } catch (delError) {
            deleteResults.push(`‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ ${factor.id}: ${delError}`);
          }
        }
        
        deleteResults.push('‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
      } else {
        deleteResults.push('‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
      }

    } catch (error) {
      deleteResults.push(`‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: ${error}`);
    } finally {
      setTestResult(deleteResults.join('\n'));
      setIsCleaningUp(false);
    }
  };

  const runDetailedTest = async () => {
    setIsTestRunning(true);
    setTestResult('');
    
    try {
      logger.auth.info('=== –î–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç MFA API ===');
      
      // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { data: { user }, error: userError } = await supabase.auth.getUser();
      if (userError || !user) {
        setTestResult('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω');
        return;
      }
      
      // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã
      const { data: factors, error: listError } = await supabase.auth.mfa.listFactors();
      if (listError) {
        setTestResult(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–∫—Ç–æ—Ä–æ–≤: ${listError.message}`);
        return;
      }
      
      const totpFactors = factors?.totp || [];
      const phoneFactors = factors?.phone || [];
      const allFactors = factors?.all || [];
      
      let factorInfo = `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.email}\n`;
      factorInfo += `üìä TOTP —Ñ–∞–∫—Ç–æ—Ä–æ–≤: ${totpFactors.length}\n`;
      factorInfo += `üì± Phone —Ñ–∞–∫—Ç–æ—Ä–æ–≤: ${phoneFactors.length}\n`;
      factorInfo += `üî¢ –í—Å–µ–≥–æ —Ñ–∞–∫—Ç–æ—Ä–æ–≤: ${allFactors.length}`;
      
      if (allFactors.length > 0) {
        factorInfo += '\n\nüîç –î–µ—Ç–∞–ª–∏ –≤—Å–µ—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤:';
        allFactors.forEach((factor, index) => {
          factorInfo += `\n  ${index + 1}. ID: ${factor.id}`;
          factorInfo += `\n     –¢–∏–ø: ${factor.factor_type}`;
          factorInfo += `\n     –ò–º—è: "${factor.friendly_name || ''}"`;
          factorInfo += `\n     –°—Ç–∞—Ç—É—Å: ${factor.status}`;
        });
      }
      
      setTestResult(factorInfo);
      
      // 3. –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–∫—Ç–æ—Ä
      try {
        const enrollResult = await supabase.auth.mfa.enroll({
          factorType: 'totp',
        });
        
        if (enrollResult.error) {
                  // –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—à–∏–±–∫–∏
        const error = enrollResult.error as {
          message: string;
          status?: number;
          code?: string;
        };
        let errorDetails = `‚ùå Enroll –æ—à–∏–±–∫–∞: ${error.message}`;
        
        if (error.status) {
          errorDetails += `\nüî¢ HTTP Status: ${error.status}`;
        }
        
        if (error.code) {
          errorDetails += `\nüè∑Ô∏è Error Code: ${error.code}`;
        }
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Å–ª—É—á–∞–∏
          if (error.message.includes('already enrolled') || error.message.includes('already exists')) {
            errorDetails += '\nüí° –í–æ–∑–º–æ–∂–Ω–æ, —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–∫—Ç–æ—Ä–æ–≤';
          } else if (error.status === 422 && error.code === 'mfa_factor_name_conflict') {
            errorDetails += '\nüîß –†–ï–®–ï–ù–ò–ï: –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç –∏–º–µ–Ω —Ñ–∞–∫—Ç–æ—Ä–æ–≤!';
            errorDetails += '\n  –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã" –Ω–∏–∂–µ';
          } else if (error.status === 422) {
            errorDetails += '\nüí° 422 –æ—à–∏–±–∫–∞ –º–æ–∂–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å:\n  - –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞\n  - –õ–∏–º–∏—Ç —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –ø—Ä–µ–≤—ã—à–µ–Ω\n  - –ö–æ–Ω—Ñ–ª–∏–∫—Ç —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Ñ–∞–∫—Ç–æ—Ä–∞–º–∏';
          }
          
          setTestResult(prev => prev + '\n\n' + errorDetails);
        } else {
          // –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω, —Å—Ä–∞–∑—É —É–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–∫—Ç–æ—Ä
          if (enrollResult.data?.id) {
            await supabase.auth.mfa.unenroll({ factorId: enrollResult.data.id });
            setTestResult(prev => prev + '\n\n‚úÖ MFA Enroll API —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!\nüóëÔ∏è –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–∫—Ç–æ—Ä —É–¥–∞–ª–µ–Ω');
          }
        }
      } catch (enrollError) {
        let errorDetails = `‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ Enroll: `;
        
        if (enrollError instanceof Error) {
          errorDetails += enrollError.message;
          if ('status' in enrollError) {
            errorDetails += `\nüî¢ HTTP Status: ${(enrollError as Error & { status: number }).status}`;
          }
        } else {
          errorDetails += String(enrollError);
        }
        
        if (enrollError instanceof Error && 'status' in enrollError && (enrollError as Error & { status: number }).status === 422) {
          errorDetails += '\n\nüîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è 422:\n';
          errorDetails += '  1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ MFA –≤ Dashboard\n';
          errorDetails += '  2. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ TOTP –≤–∫–ª—é—á–µ–Ω\n';
          errorDetails += '  3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–∏–º–∏—Ç—ã —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n';
          errorDetails += '  4. –í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫';
        }
        
        setTestResult(prev => prev + '\n\n' + errorDetails);
      }
      
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      setTestResult(`‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: ${errorMessage}`);
    } finally {
      setIsTestRunning(false);
    }
  };

  return (
    <div className="min-h-screen bg-gray-900 py-8">
      <div className="max-w-4xl mx-auto px-4">
        <div className="mb-6">
          <h1 className="text-3xl font-bold text-white mb-2">
            üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ 2FA
          </h1>
          <p className="text-gray-400">
            –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
          </p>
        </div>

        <div className="flex gap-4 mb-6 flex-wrap">
          <Button
            onClick={() => setMode('diagnostic')}
            className={`${mode === 'diagnostic' ? 'bg-blue-600' : 'bg-gray-600'} hover:bg-blue-700`}
          >
            üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
          </Button>
          <Button
            onClick={() => setMode('setup')}
            className={`${mode === 'setup' ? 'bg-green-600' : 'bg-gray-600'} hover:bg-green-700`}
          >
            ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ 2FA
          </Button>
          <Button
            onClick={runDetailedTest}
            disabled={isTestRunning}
            className="bg-purple-600 hover:bg-purple-700"
          >
            {isTestRunning ? 'üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...' : 'üß™ –î–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç'}
          </Button>
          <Button
            onClick={cleanupProblematicFactors}
            disabled={isCleaningUp}
            className="bg-red-600 hover:bg-red-700"
          >
            {isCleaningUp ? 'üßπ –û—á–∏—Å—Ç–∫–∞...' : 'üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã'}
          </Button>
        </div>

        {/* –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ */}
        {testResult && (
          <div className="mb-6 p-4 bg-gray-800 rounded-lg border border-purple-500">
            <h3 className="text-purple-200 font-medium mb-2">üß™ –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞:</h3>
            <pre className="text-sm text-purple-100 whitespace-pre-wrap">{testResult}</pre>
          </div>
        )}

        {mode === 'diagnostic' ? (
          <Setup2FADiagnostic />
        ) : (
          <Setup2FA onSetupComplete={() => setMode('diagnostic')} />
        )}
      </div>
    </div>
  );
} 