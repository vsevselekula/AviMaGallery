import { Campaign } from '@/types/campaign';

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞–Ω–æ–Ω—Å –∫–∞–º–ø–∞–Ω–∏–∏ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞
 */
export function generateCampaignAnnouncement(campaign: Campaign): string {
  const sections: string[] = [];

  // 1. –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫–∞–º–ø–∞–Ω–∏–∏
  sections.push(`### üéØ **${campaign.campaign_name}**`);
  sections.push('');

  // 2. –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (—Ç–∏–ø, –≤–µ—Ä—Ç–∏–∫–∞–ª—å, —Å—Ç–∞—Ç—É—Å)
  if (campaign.campaign_type) {
    sections.push(`**–¢–∏–ø –∫–∞–º–ø–∞–Ω–∏–∏:** ${campaign.campaign_type}`);
  }

  if (campaign.campaign_vertical) {
    sections.push(`**–í–µ—Ä—Ç–∏–∫–∞–ª—å:** ${campaign.campaign_vertical}`);
  }

  if (campaign.status) {
    const statusEmoji =
      {
        active: 'üü¢',
        planned: 'üü°',
        completed: '‚úÖ',
      }[campaign.status] || '‚ö™';
    sections.push(
      `**–°—Ç–∞—Ç—É—Å:** ${statusEmoji} ${getStatusText(campaign.status)}`
    );
  }
  sections.push('');

  // 3. –ü–µ—Ä–∏–æ–¥ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è
  if (campaign.flight_period?.start_date && campaign.flight_period?.end_date) {
    const startDate = formatDate(campaign.flight_period.start_date);
    const endDate = formatDate(campaign.flight_period.end_date);
    sections.push(`**üìÖ –ü–µ—Ä–∏–æ–¥ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è:** ${startDate} - ${endDate}`);
    sections.push('');
  }

  // 4. –ö–ª—é—á–µ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ!)
  if (campaign.key_message) {
    sections.push(`**üí¨ –ö–ª—é—á–µ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:**`);
    sections.push(campaign.key_message);
    sections.push('');
  }

  // 5. –°–ª–æ–≥–∞–Ω (–µ—Å–ª–∏ –µ—Å—Ç—å)
  if (campaign.slogan) {
    sections.push(`**‚ú® –°–ª–æ–≥–∞–Ω:** *${campaign.slogan}*`);
    sections.push('');
  }

  // 6. –û–ø–∏—Å–∞–Ω–∏–µ
  if (campaign.description) {
    sections.push(`**üìù –û–ø–∏—Å–∞–Ω–∏–µ:**`);
    sections.push(campaign.description);
    sections.push('');
  }

  // 7. –¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è
  if (campaign.audience) {
    sections.push(`**üë• –ê—É–¥–∏—Ç–æ—Ä–∏—è:** ${campaign.audience}`);
    sections.push('');
  }

  // 8. –ì–µ–æ–≥—Ä–∞—Ñ–∏—è
  if (campaign.geo) {
    sections.push(`**üåç –ì–µ–æ–≥—Ä–∞—Ñ–∏—è:** ${campaign.geo}`);
    sections.push('');
  }

  // 9. –¶–µ–ª–∏ –∫–∞–º–ø–∞–Ω–∏–∏
  if (campaign.objectives && campaign.objectives.length > 0) {
    sections.push(`**üéØ –¶–µ–ª–∏:**`);
    campaign.objectives.forEach((objective) => {
      sections.push(`‚Ä¢ ${objective}`);
    });
    sections.push('');
  }

  // 10. –ö–∞–Ω–∞–ª—ã —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
  if (campaign.channels && campaign.channels.length > 0) {
    sections.push(`**üì¢ –ö–∞–Ω–∞–ª—ã:**`);
    campaign.channels.forEach((channel) => {
      sections.push(`‚Ä¢ ${channel}`);
    });
    sections.push('');
  }

  // 11. –¢–∞—Ä–≥–µ—Ç—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
  if (campaign.targets && campaign.targets.length > 0) {
    sections.push(`**üéØ –¢–∞—Ä–≥–µ—Ç—ã:**`);
    campaign.targets.forEach((target) => {
      sections.push(`‚Ä¢ ${target}`);
    });
    sections.push('');
  }

  // 12. –°—Å—ã–ª–∫–∏ –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
  if (
    campaign.links &&
    Array.isArray(campaign.links) &&
    campaign.links.length > 0
  ) {
    sections.push(`**üîó –°—Å—ã–ª–∫–∏ –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:**`);
    campaign.links.forEach((link) => {
      if (link.label && link.url) {
        sections.push(`‚Ä¢ **${link.label}:** [${link.url}](${link.url})`);
      }
    });
    sections.push('');
  }

  // 13. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
  if (campaign.pre_tests || campaign.post_tests) {
    sections.push(`**üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:**`);

    if (campaign.pre_tests) {
      sections.push(`**Pre-—Ç–µ—Å—Ç—ã:**`);
      sections.push(formatTestData(campaign.pre_tests));
      sections.push('');
    }

    if (campaign.post_tests) {
      sections.push(`**Post-—Ç–µ—Å—Ç—ã:**`);
      sections.push(formatTestData(campaign.post_tests));
      sections.push('');
    }
  }

  return sections.join('\n');
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
 */
function formatDate(dateString: string): string {
  const date = new Date(dateString);
  return date.toLocaleDateString('ru-RU', {
    day: '2-digit',
    month: '2-digit',
    year: 'numeric',
  });
}

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
 */
function getStatusText(status: string): string {
  const statusMap: Record<string, string> = {
    active: '–ê–∫—Ç–∏–≤–Ω–∞',
    planned: '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞',
    completed: '–ó–∞–≤–µ—Ä—à–µ–Ω–∞',
  };
  return statusMap[status] || status;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∞–Ω–æ–Ω—Å–∞
 */
function formatTestData(testData: unknown): string {
  if (!testData) return '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö';

  // –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ - –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
  if (typeof testData === 'string') {
    return testData;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç {text?: string, links?: TestLink[]}
  if (
    typeof testData === 'object' &&
    testData !== null &&
    !Array.isArray(testData)
  ) {
    const data = testData as {
      text?: string;
      links?: Array<{ label: string; url: string }>;
    };

    if (data.text !== undefined || data.links !== undefined) {
      const parts: string[] = [];

      if (data.text && data.text.trim()) {
        parts.push(data.text.trim());
      }

      if (data.links && data.links.length > 0) {
        data.links.forEach((link) => {
          if (link.label && link.url) {
            parts.push(`[${link.label}](${link.url})`);
          }
        });
      }

      return parts.join('\n');
    }
  }

  // –ï—Å–ª–∏ —ç—Ç–æ –º–∞—Å—Å–∏–≤ —Å—Å—ã–ª–æ–∫ (—Ñ–æ—Ä–º–∞—Ç TestLink[])
  if (Array.isArray(testData)) {
    const parts: string[] = [];

    testData.forEach((item, index) => {
      if (typeof item === 'object' && item !== null) {
        const link = item as { label?: string; url?: string };

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ–±—ä–µ–∫—Ç–æ–º —Å—Å—ã–ª–∫–∏
        if (link.label && link.url) {
          parts.push(`[${link.label}](${link.url})`);
        } else {
          // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å—Å—ã–ª–∫–∞, —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∫ —Å–ª–æ–∂–Ω—ã–π –æ–±—ä–µ–∫—Ç
          parts.push(
            formatComplexObject(item as Record<string, unknown>, index + 1)
          );
        }
      } else {
        parts.push(`‚Ä¢ ${String(item)}`);
      }
    });

    return parts.join('\n');
  }

  // –ï—Å–ª–∏ —ç—Ç–æ —Å–ª–æ–∂–Ω—ã–π –æ–±—ä–µ–∫—Ç - —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∫ —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç
  if (typeof testData === 'object' && testData !== null) {
    return formatComplexObject(testData as Record<string, unknown>);
  }

  return String(testData);
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ª–æ–∂–Ω—ã–π –æ–±—ä–µ–∫—Ç –≤ —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç
 */
function formatComplexObject(
  obj: Record<string, unknown>,
  index?: number
): string {
  const parts: string[] = [];

  if (index) {
    parts.push(`**–¢–µ—Å—Ç ${index}:**`);
  }

  Object.entries(obj).forEach(([key, value]) => {
    // –ü–µ—Ä–µ–≤–æ–¥–∏–º –∫–ª—é—á–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π –∏ –¥–µ–ª–∞–µ–º –∏—Ö —á–∏—Ç–∞–µ–º—ã–º–∏
    const readableKey = translateKey(key);

    if (value === null || value === undefined) {
      return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    }

    if (typeof value === 'string') {
      if (value.startsWith('http')) {
        // –≠—Ç–æ —Å—Å—ã–ª–∫–∞
        parts.push(`‚Ä¢ **${readableKey}:** [${value}](${value})`);
      } else {
        // –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
        parts.push(`‚Ä¢ **${readableKey}:** ${value}`);
      }
    } else if (typeof value === 'number') {
      parts.push(`‚Ä¢ **${readableKey}:** ${value}`);
    } else if (typeof value === 'boolean') {
      parts.push(`‚Ä¢ **${readableKey}:** ${value ? '–î–∞' : '–ù–µ—Ç'}`);
    } else if (Array.isArray(value)) {
      if (value.length > 0) {
        parts.push(`‚Ä¢ **${readableKey}:**`);
        value.forEach((item) => {
          if (typeof item === 'string') {
            parts.push(`  - ${item}`);
          } else if (typeof item === 'object' && item !== null) {
            parts.push(`  - ${JSON.stringify(item)}`);
          } else {
            parts.push(`  - ${String(item)}`);
          }
        });
      }
    } else if (typeof value === 'object' && value !== null) {
      // –í–ª–æ–∂–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç
      parts.push(`‚Ä¢ **${readableKey}:**`);
      const nestedText = formatComplexObject(value as Record<string, unknown>);
      nestedText.split('\n').forEach((line) => {
        if (line.trim()) {
          parts.push(`  ${line}`);
        }
      });
    } else {
      parts.push(`‚Ä¢ **${readableKey}:** ${String(value)}`);
    }
  });

  return parts.join('\n');
}

/**
 * –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –∫–ª—é—á–∏ –æ–±—ä–µ–∫—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
 */
function translateKey(key: string): string {
  const translations: Record<string, string> = {
    title: '–ù–∞–∑–≤–∞–Ω–∏–µ',
    name: '–ù–∞–∑–≤–∞–Ω–∏–µ',
    label: '–ú–µ—Ç–∫–∞',
    description: '–û–ø–∏—Å–∞–Ω–∏–µ',
    url: '–°—Å—ã–ª–∫–∞',
    link: '–°—Å—ã–ª–∫–∞',
    href: '–°—Å—ã–ª–∫–∞',
    type: '–¢–∏–ø',
    status: '–°—Ç–∞—Ç—É—Å',
    date: '–î–∞—Ç–∞',
    created_at: '–°–æ–∑–¥–∞–Ω–æ',
    updated_at: '–û–±–Ω–æ–≤–ª–µ–Ω–æ',
    start_date: '–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞',
    end_date: '–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è',
    results: '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã',
    score: '–û—Ü–µ–Ω–∫–∞',
    rating: '–†–µ–π—Ç–∏–Ω–≥',
    feedback: '–û—Ç–∑—ã–≤',
    comment: '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π',
    notes: '–ó–∞–º–µ—Ç–∫–∏',
    conclusion: '–ó–∞–∫–ª—é—á–µ–Ω–∏–µ',
    recommendation: '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è',
    methodology: '–ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è',
    sample_size: '–†–∞–∑–º–µ—Ä –≤—ã–±–æ—Ä–∫–∏',
    target_audience: '–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è',
    metrics: '–ú–µ—Ç—Ä–∏–∫–∏',
    kpi: 'KPI',
    performance: '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
    effectiveness: '–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
    awareness: '–£–∑–Ω–∞–≤–∞–µ–º–æ—Å—Ç—å',
    recall: '–ó–∞–ø–æ–º–∏–Ω–∞–µ–º–æ—Å—Ç—å',
    brand_lift: '–ü—Ä–∏—Ä–æ—Å—Ç –±—Ä–µ–Ω–¥–∞',
    purchase_intent: '–ù–∞–º–µ—Ä–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏',
    attitude: '–û—Ç–Ω–æ—à–µ–Ω–∏–µ',
    perception: '–í–æ—Å–ø—Ä–∏—è—Ç–∏–µ',
  };

  // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
  if (translations[key.toLowerCase()]) {
    return translations[key.toLowerCase()];
  }

  // –ó–∞—Ç–µ–º –∏—â–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
  for (const [eng, rus] of Object.entries(translations)) {
    if (key.toLowerCase().includes(eng)) {
      return rus;
    }
  }

  // –ï—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–µ—Ç, –¥–µ–ª–∞–µ–º –∫–ª—é—á —á–∏—Ç–∞–µ–º—ã–º
  return key
    .replace(/([A-Z])/g, ' $1') // –†–∞–∑–¥–µ–ª—è–µ–º camelCase
    .replace(/[_-]/g, ' ') // –ó–∞–º–µ–Ω—è–µ–º –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –∏ –¥–µ—Ñ–∏—Å—ã –Ω–∞ –ø—Ä–æ–±–µ–ª—ã
    .replace(/^\w/, (c) => c.toUpperCase()) // –ü–µ—Ä–≤–∞—è –±—É–∫–≤–∞ –∑–∞–≥–ª–∞–≤–Ω–∞—è
    .trim();
}
