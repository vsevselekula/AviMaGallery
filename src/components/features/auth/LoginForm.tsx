'use client';

import { useState, useEffect } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import { supabase } from '@/lib/supabase';
import { Button } from '@/components/ui/Button';
import { Input } from '@/components/ui/Input';
import { logger } from '@/lib/logger';
import { Verify2FA } from './Verify2FA';
import { Setup2FA } from './Setup2FA';

export function LoginForm() {
  const router = useRouter();
  const searchParams = useSearchParams();
  const [localEmailPart, setLocalEmailPart] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [showMFA, setShowMFA] = useState(false);
  const [showSetup2FA, setShowSetup2FA] = useState(false);
  const [requireSetup, setRequireSetup] = useState(false);
  const [require2FAMessage, setRequire2FAMessage] = useState<string | null>(null);

  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä require2fa –∏–∑ URL
    const require2fa = searchParams?.get('require2fa');
    const redirectedFrom = searchParams?.get('redirectedFrom');
    
    if (require2fa === 'true') {
      setRequire2FAMessage(
        redirectedFrom 
          ? `–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ ${redirectedFrom} —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ 2FA. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.`
          : '–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∏—Å—Ç–µ–º–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ 2FA. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.'
      );
    }
  }, [searchParams]);

  const check2FAStatus = async () => {
    try {
      const { data } = await supabase.auth.mfa.listFactors();
      const hasActiveFactor = data?.totp?.some(factor => factor.status === 'verified');
      return hasActiveFactor;
    } catch (error) {
      logger.auth.error('Error checking 2FA status:', error);
      return false;
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError(null);
    setIsLoading(true);
    logger.auth.debug('Starting login process');

    const fullEmail = `${localEmailPart}@avito.ru`;

    try {
      logger.auth.debug('Attempting to sign in', {
        email: fullEmail,
      });
      const { error: signInError } = await supabase.auth.signInWithPassword({
        email: fullEmail,
        password,
      });

      if (signInError) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ MFA
        if (signInError.message.includes('MFA') || signInError.message.includes('factor')) {
          setShowMFA(true);
          setIsLoading(false);
          return;
        }
        logger.auth.error('Sign in error', signInError);
        throw signInError;
      }

      logger.auth.info('Password authentication successful');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å 2FA –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ –ø–æ –ø–∞—Ä–æ–ª—é
      const has2FA = await check2FAStatus();
      
      if (has2FA) {
        // –ï—Å–ª–∏ 2FA –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞, —Ç—Ä–µ–±—É–µ–º –µ—ë –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        logger.auth.info('2FA detected, requiring verification');
        setShowMFA(true);
      } else {
        // –ï—Å–ª–∏ 2FA –ù–ï –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Ç—Ä–µ–±—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
        logger.auth.info('2FA not configured, requiring setup');
        setRequireSetup(true);
        setShowSetup2FA(true);
      }

      setIsLoading(false);
    } catch (error) {
      logger.auth.error('Login error', error);
      setError(
        error instanceof Error ? error.message : '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ'
      );
      setIsLoading(false);
    }
  };

  const handleMFASuccess = () => {
    logger.auth.info('2FA verification successful, redirecting to dashboard');
    router.refresh();
    router.push('/dashboard');
  };

  const handle2FASetupComplete = () => {
    logger.auth.info('2FA setup completed, redirecting to dashboard');
    setShowSetup2FA(false);
    router.refresh();
    router.push('/dashboard');
  };

  const handleCancel = () => {
    setShowMFA(false);
    setShowSetup2FA(false);
    setRequireSetup(false);
    // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Å–∏—Å—Ç–µ–º—ã –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ
    supabase.auth.signOut();
  };

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É 2FA
  if (showSetup2FA) {
    return (
      <div className="w-full space-y-6">
        <div className="bg-yellow-900/50 p-4 rounded-lg border border-yellow-500 mb-6">
          <h3 className="font-medium text-yellow-200 mb-2">
            üîí –û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
          </h3>
          <p className="text-yellow-200 text-sm">
            –î–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–æ–ª–∂–Ω—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å 2FA. 
            –í—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–µ–∑ –µ—ë –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.
          </p>
        </div>
        
        <Setup2FA onSetupComplete={handle2FASetupComplete} />
        
        {!requireSetup && (
          <div className="text-center">
            <Button
              onClick={handleCancel}
              variant="outline"
              className="text-sm"
            >
              –û—Ç–º–µ–Ω–∞
            </Button>
          </div>
        )}
      </div>
    );
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º MFA —Ñ–æ—Ä–º—É –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
  if (showMFA) {
    return (
      <div className="w-full space-y-6">
        <div className="bg-blue-900/50 p-4 rounded-lg border border-blue-500 mb-6">
          <h3 className="font-medium text-blue-200 mb-2">
            üîê –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—Ö–æ–¥–∞
          </h3>
          <p className="text-blue-200 text-sm">
            –ü–∞—Ä–æ–ª—å –ø—Ä–∏–Ω—è—Ç. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è-–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Ö–æ–¥–∞.
          </p>
        </div>
        
        <Verify2FA
          onSuccess={handleMFASuccess}
          onCancel={handleCancel}
        />
      </div>
    );
  }

  return (
    <div className="w-full space-y-6">
      {require2FAMessage && (
        <div className="bg-orange-900/50 p-4 rounded-lg border border-orange-500">
          <h3 className="font-medium text-orange-200 mb-2">
            üîê –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ 2FA
          </h3>
          <p className="text-orange-200 text-sm">
            {require2FAMessage}
          </p>
        </div>
      )}
      
      <form onSubmit={handleSubmit} className="space-y-6">
        <div className="space-y-4">
          <div>
            <label
              htmlFor="email"
              className="block text-sm font-medium text-gray-300 mb-1"
            >
              Email
            </label>
            <div className="flex items-center">
              <Input
                id="email"
                name="email"
                type="text"
                autoComplete="email"
                required
                placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω"
                value={localEmailPart}
                onChange={(e) => setLocalEmailPart(e.target.value)}
                className="flex-1 bg-gray-700 border-gray-600 text-white placeholder-gray-400 focus:ring-indigo-500 focus:border-indigo-500 rounded-r-none"
              />
              <span className="inline-flex items-center px-3 py-2 rounded-r-md border border-l-0 border-gray-600 bg-gray-700 text-gray-400 text-sm h-10">
                @avito.ru
              </span>
            </div>
          </div>
          <div>
            <label
              htmlFor="password"
              className="block text-sm font-medium text-gray-300 mb-1"
            >
              –ü–∞—Ä–æ–ª—å
            </label>
            <Input
              id="password"
              name="password"
              type="password"
              autoComplete="current-password"
              required
              placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              className="bg-gray-700 border-gray-600 text-white placeholder-gray-400 focus:ring-indigo-500 focus:border-indigo-500"
            />
          </div>
        </div>

        {error && (
          <div className="rounded-md bg-red-900/50 p-4 border border-red-500">
            <p className="text-sm text-red-200">{error}</p>
          </div>
        )}

        <Button
          type="submit"
          className="w-full bg-indigo-600 hover:bg-indigo-700 text-white font-medium py-2 px-4 rounded-md transition-colors"
          disabled={isLoading}
        >
          {isLoading ? '–í—Ö–æ–¥...' : '–í–æ–π—Ç–∏'}
        </Button>
      </form>
      
      <div className="bg-blue-900/50 p-4 rounded-lg border border-blue-500">
        <h3 className="font-medium text-blue-200 mb-2">
          üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å Avito
        </h3>
        <p className="text-blue-200 text-sm">
          –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–æ–ª–∂–Ω—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–ª—è –∑–∞—â–∏—Ç—ã –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
        </p>
      </div>
    </div>
  );
}
