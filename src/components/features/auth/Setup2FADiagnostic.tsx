'use client';

import { useState, useEffect } from 'react';
import { supabase } from '@/lib/supabase';
import { Button } from '@/components/ui/Button';
import { logger } from '@/lib/logger';

export function Setup2FADiagnostic() {
  const [diagnostics, setDiagnostics] = useState<{
    mfaAvailable: boolean | null;
    error: string | null;
    userAuthenticated: boolean | null;
    supabaseVersion: string | null;
    existingFactors: Array<{
      id: string;
      friendly_name?: string;
      status: string;
    }>;
    hasActiveFactors: boolean | null;
    enrollTest: string | null;
  }>({
    mfaAvailable: null,
    error: null,
    userAuthenticated: null,
    supabaseVersion: null,
    existingFactors: [],
    hasActiveFactors: null,
    enrollTest: null,
  });

  const [isChecking, setIsChecking] = useState(false);

  const runDiagnostics = async () => {
    setIsChecking(true);
    const newDiagnostics = {
      mfaAvailable: null as boolean | null,
      error: null as string | null,
      userAuthenticated: null as boolean | null,
      supabaseVersion: null as string | null,
      existingFactors: [] as Array<{
        id: string;
        friendly_name?: string;
        status: string;
      }>,
      hasActiveFactors: null as boolean | null,
      enrollTest: null as string | null,
    };

    try {
      // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é Supabase
      // @ts-expect-error - –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é –≤–µ—Ä—Å–∏—é –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
      newDiagnostics.supabaseVersion = supabase?.['version'] || 'unknown';

      // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { data: { user }, error: authError } = await supabase.auth.getUser();
      newDiagnostics.userAuthenticated = !!user && !authError;
      
      if (authError) {
        newDiagnostics.error = `Auth error: ${authError.message}`;
        setDiagnostics(newDiagnostics);
        return;
      }

      if (!user) {
        newDiagnostics.error = 'User not authenticated. Please log in first.';
        setDiagnostics(newDiagnostics);
        return;
      }

      // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å MFA API
      try {
        if (!supabase.auth.mfa) {
          newDiagnostics.error = 'MFA methods not available in this Supabase version';
          newDiagnostics.mfaAvailable = false;
        } else if (!supabase.auth.mfa.listFactors) {
          newDiagnostics.error = 'MFA listFactors method not available';
          newDiagnostics.mfaAvailable = false;
        } else {
          // –ü—Ä–æ–±—É–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–∫—Ç–æ—Ä–æ–≤
          const { data: factors, error: mfaError } = await supabase.auth.mfa.listFactors();
          
          if (mfaError) {
            if (mfaError.message.includes('MFA is not enabled')) {
              newDiagnostics.error = 'MFA –Ω–µ –≤–∫–ª—é—á–µ–Ω–∞ –≤ Supabase Dashboard';
              newDiagnostics.mfaAvailable = false;
            } else {
              newDiagnostics.error = `MFA API error: ${mfaError.message}`;
              newDiagnostics.mfaAvailable = false;
            }
          } else {
            newDiagnostics.mfaAvailable = true;
            
            if (factors?.totp && factors.totp.length > 0) {
              newDiagnostics.existingFactors = factors.totp;
              newDiagnostics.hasActiveFactors = factors.totp.some(f => f.status === 'verified');
            } else {
              newDiagnostics.hasActiveFactors = false;
            }

            // 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º enroll API
            try {
              logger.auth.info('Testing MFA enroll API...');
              
              const enrollTest = await supabase.auth.mfa.enroll({
                factorType: 'totp',
              });
              
              if (enrollTest.error) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –æ—à–∏–±–∫–∏
                if (enrollTest.error.message.includes('already has this factor') || 
                    enrollTest.error.message.includes('already enrolled')) {
                  newDiagnostics.enrollTest = '‚úÖ MFA API —Ä–∞–±–æ—Ç–∞–µ—Ç (—É–∂–µ –µ—Å—Ç—å —Ñ–∞–∫—Ç–æ—Ä)';
                  newDiagnostics.error = null;
                } else {
                  newDiagnostics.enrollTest = `‚ùå Enroll Error: ${enrollTest.error.message}`;
                  newDiagnostics.mfaAvailable = false;
                }
              } else {
                // –ï—Å–ª–∏ —Å–æ–∑–¥–∞–ª—Å—è —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–∫—Ç–æ—Ä, —É–¥–∞–ª—è–µ–º –µ–≥–æ
                if (enrollTest.data?.id) {
                  await supabase.auth.mfa.unenroll({ factorId: enrollTest.data.id });
                  newDiagnostics.enrollTest = '‚úÖ MFA Enroll API –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—Ç–∞–µ—Ç!';
                  newDiagnostics.error = null;
                }
              }
            } catch (enrollError) {
              const errorMessage = enrollError instanceof Error ? enrollError.message : 'Unknown error';
              newDiagnostics.enrollTest = `‚ùå Enroll Test Error: ${errorMessage}`;
              newDiagnostics.mfaAvailable = false;
              
              // –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—à–∏–±–∫–∏ 422
              if (enrollError instanceof Error && 'status' in enrollError) {
                const statusCode = (enrollError as Error & { status: number }).status;
                if (statusCode === 422) {
                  newDiagnostics.error = '422 –û—à–∏–±–∫–∞: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ MFA –≤ Supabase Dashboard';
                } else {
                  newDiagnostics.error = `HTTP ${statusCode}: ${errorMessage}`;
                }
              } else {
                newDiagnostics.error = errorMessage;
              }
            }
          }
        }
      } catch (mfaCheckError: unknown) {
        const errorMessage = mfaCheckError instanceof Error ? mfaCheckError.message : 'Unknown error';
        newDiagnostics.error = `MFA check failed: ${errorMessage}`;
        newDiagnostics.mfaAvailable = false;
      }

    } catch (generalError: unknown) {
      const errorMessage = generalError instanceof Error ? generalError.message : 'Unknown error';
      newDiagnostics.error = `General error: ${errorMessage}`;
      logger.auth.error('Diagnostics failed:', generalError);
    } finally {
      setDiagnostics(newDiagnostics);
      setIsChecking(false);
    }
  };

  useEffect(() => {
    runDiagnostics();
  }, []);

  const getStatusIcon = (status: boolean | null) => {
    if (status === null) return '‚è≥';
    return status ? '‚úÖ' : '‚ùå';
  };

  const getStatusText = (status: boolean | null, successText: string, failText: string) => {
    if (status === null) return '–ü—Ä–æ–≤–µ—Ä–∫–∞...';
    return status ? successText : failText;
  };

  return (
    <div className="max-w-2xl mx-auto p-6 bg-gray-800 rounded-lg">
      <div className="flex items-center justify-between mb-6">
        <h2 className="text-2xl font-bold text-white">
          üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ 2FA
        </h2>
        <Button
          onClick={runDiagnostics}
          disabled={isChecking}
          className="bg-blue-600 hover:bg-blue-700"
        >
          {isChecking ? '–ü—Ä–æ–≤–µ—Ä–∫–∞...' : '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞'}
        </Button>
      </div>

      <div className="space-y-4">
        {/* –°—Ç–∞—Ç—É—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ */}
        <div className="flex items-center justify-between p-4 bg-gray-700 rounded-lg">
          <div className="flex items-center space-x-3">
            <span className="text-2xl">{getStatusIcon(diagnostics.userAuthenticated)}</span>
            <div>
              <h3 className="font-medium text-white">–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</h3>
              <p className="text-sm text-gray-400">
                {getStatusText(diagnostics.userAuthenticated, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω', '–¢—Ä–µ–±—É–µ—Ç—Å—è –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É')}
              </p>
            </div>
          </div>
        </div>

        {/* –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å MFA */}
        <div className="flex items-center justify-between p-4 bg-gray-700 rounded-lg">
          <div className="flex items-center space-x-3">
            <span className="text-2xl">{getStatusIcon(diagnostics.mfaAvailable)}</span>
            <div>
              <h3 className="font-medium text-white">–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å MFA API</h3>
              <p className="text-sm text-gray-400">
                {getStatusText(diagnostics.mfaAvailable, 'MFA API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', 'MFA API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ')}
              </p>
            </div>
          </div>
        </div>

        {/* –í–µ—Ä—Å–∏—è Supabase */}
        <div className="flex items-center justify-between p-4 bg-gray-700 rounded-lg">
          <div className="flex items-center space-x-3">
            <span className="text-2xl">üì¶</span>
            <div>
              <h3 className="font-medium text-white">–í–µ—Ä—Å–∏—è Supabase</h3>
              <p className="text-sm text-gray-400">
                {diagnostics.supabaseVersion || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
              </p>
            </div>
          </div>
        </div>

        {/* –¢–µ—Å—Ç Enroll API */}
        {diagnostics.enrollTest && (
          <div className="p-4 bg-purple-900/50 rounded border border-purple-500">
            <h3 className="font-medium text-purple-200 mb-2">üß™ –¢–µ—Å—Ç Enroll API:</h3>
            <p className="text-sm text-purple-200">{diagnostics.enrollTest}</p>
          </div>
        )}

        {/* –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã */}
        {diagnostics.existingFactors.length > 0 && (
          <div className="p-4 bg-blue-900/50 rounded border border-blue-500">
            <h3 className="font-medium text-blue-200 mb-2">üîê –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ 2FA —Ñ–∞–∫—Ç–æ—Ä—ã:</h3>
            <ul className="space-y-2">
              {diagnostics.existingFactors.map((factor) => (
                <li key={factor.id} className="text-sm text-blue-200 flex items-center justify-between">
                  <span>‚Ä¢ {factor.friendly_name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</span>
                  <span className={`px-2 py-1 rounded text-xs ${
                    factor.status === 'verified' 
                      ? 'bg-green-800 text-green-200' 
                      : 'bg-yellow-800 text-yellow-200'
                  }`}>
                    {factor.status}
                  </span>
                </li>
              ))}
            </ul>
            
            {diagnostics.hasActiveFactors && (
              <p className="text-sm text-green-200 mt-2">
                ‚úÖ –£ –≤–∞—Å –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ 2FA —Ñ–∞–∫—Ç–æ—Ä—ã!
              </p>
            )}
          </div>
        )}

        {/* –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ */}
        {diagnostics.error && (
          <div className="p-4 bg-red-900/50 rounded border border-red-500">
            <h3 className="font-medium text-red-200 mb-2">‚ùå –ü—Ä–æ–±–ª–µ–º–∞:</h3>
            <p className="text-sm text-red-200">{diagnostics.error}</p>
          </div>
        )}

        {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ä–µ—à–µ–Ω–∏—é */}
        {diagnostics.mfaAvailable === false && (
          <div className="p-4 bg-yellow-900/50 rounded border border-yellow-500">
            <h3 className="font-medium text-yellow-200 mb-2">üìã –ö–∞–∫ –∏—Å–ø—Ä–∞–≤–∏—Ç—å:</h3>
            <ol className="text-sm text-yellow-200 space-y-2 list-decimal list-inside">
              <li>–û—Ç–∫—Ä–æ–π—Ç–µ <strong>Supabase Dashboard</strong></li>
              <li>–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ <strong>Authentication ‚Üí Settings</strong></li>
              <li>–ù–∞–π–¥–∏—Ç–µ —Ä–∞–∑–¥–µ–ª <strong>"Multi-Factor Authentication (MFA)"</strong></li>
              <li>–í–∫–ª—é—á–∏—Ç–µ <strong>"Enable MFA"</strong></li>
              <li>–í—ã–±–µ—Ä–∏—Ç–µ <strong>"TOTP (Time-based One-Time Password)"</strong></li>
              <li>–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞</li>
            </ol>
          </div>
        )}

        {/* –£—Å–ø–µ—à–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ */}
        {diagnostics.mfaAvailable === true && diagnostics.userAuthenticated === true && (
          <div className="p-4 bg-green-900/50 rounded border border-green-500">
            <h3 className="font-medium text-green-200 mb-2">üéâ –í—Å—ë –≥–æ—Ç–æ–≤–æ!</h3>
            <p className="text-sm text-green-200">
              MFA API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ú–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é.
            </p>
          </div>
        )}
      </div>

      {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
      <div className="mt-6 p-4 bg-blue-900/50 rounded border border-blue-500">
        <h3 className="font-medium text-blue-200 mb-2">üí° –ü–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</h3>
        <ul className="text-sm text-blue-200 space-y-1 list-disc list-inside">
          <li>MFA –≤ Supabase —Ç—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</li>
          <li>TOTP —Ä–∞–±–æ—Ç–∞–µ—Ç —Å Google Authenticator, Authy, 1Password –∏ –¥—Ä—É–≥–∏–º–∏</li>
          <li>–ü–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ 2FA –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º –≤—Ö–æ–¥–µ</li>
          <li>–û—à–∏–±–∫–∞ 422 –æ–±—ã—á–Ω–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ MFA –Ω–µ –≤–∫–ª—é—á–µ–Ω–∞ –≤ Dashboard</li>
        </ul>
      </div>
    </div>
  );
}